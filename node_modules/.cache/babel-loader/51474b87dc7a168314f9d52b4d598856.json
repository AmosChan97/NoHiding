{"ast":null,"code":"var _jsxFileName = \"/home/little_peter/Desktop/front_end_wifi_monitoring/poketimes/src/components/statistics/lineData.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\n/**\n * Sample line chart settings from http://jerairrest.github.io/react-chartjs-2/\n * @param {array<string>} labels \n * @param {array<T>} data \n * @param {string} label \n */\n\nconst lineData = (labels = [], data = [], label = \"sample data\") => {\n  console.log(\"X-AXIS\", labels);\n  console.log(\"Y-AXIS\", data);\n  return {\n    labels: labels,\n    datasets: [{\n      label: label,\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: data\n    }]\n  };\n};\n\nconst lineAuthGraph = (rawData = [], label = '', buttonState = [], apState = []) => {\n  let count = 0;\n  let ping_date = rawData.map((val, index) => {\n    if (buttonState[0] && val.AP_name === apState[0].AP_name || buttonState[1] && val.AP_name === apState[1].AP_name) {\n      return ++count;\n    } else {\n      return -1;\n    }\n  });\n  let auth_time = rawData.map(val => {\n    if (buttonState[0] && val.AP_name === apState[0].AP_name || buttonState[1] && val.AP_name === apState[1].AP_name) return val.authTime_sec;else {\n      return -1;\n    }\n  });\n\n  for (var i = ping_date.length - 1; i--;) {\n    if (ping_date[i] == 999) ping_date.splice(i, 1);\n  }\n\n  for (var i = auth_time.length - 1; i--;) {\n    if (auth_time[i] == 999) auth_time.splice(i, 1);\n  }\n\n  let data = lineData(ping_date, auth_time, label);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Line, {\n    data: data,\n    width: 400,\n    height: 200,\n    options: {\n      maintainAspectRatio: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n};\n\nexport { lineAuthGraph };","map":{"version":3,"sources":["/home/little_peter/Desktop/front_end_wifi_monitoring/poketimes/src/components/statistics/lineData.js"],"names":["React","Line","lineData","labels","data","label","console","log","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","lineAuthGraph","rawData","buttonState","apState","count","ping_date","map","val","index","AP_name","auth_time","authTime_sec","i","length","splice","maintainAspectRatio"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\n/**\n * Sample line chart settings from http://jerairrest.github.io/react-chartjs-2/\n * @param {array<string>} labels \n * @param {array<T>} data \n * @param {string} label \n */\n const lineData = (labels = [] , data = [], label = \"sample data\") => {\n  console.log(\"X-AXIS\", labels);\n  console.log(\"Y-AXIS\", data);\n  return {\n    labels: labels,\n    datasets: [\n      {\n        label: label,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: data\n      }\n    ]\n  }\n};\n\nconst lineAuthGraph = (rawData = [], label = '', buttonState = [], apState=[]) => {\n  let count = 0;\n  let ping_date = rawData.map((val, index) => { \n    if((buttonState[0] && val.AP_name === apState[0].AP_name) || (buttonState[1] && val.AP_name === apState[1].AP_name)) {\n      return ++count;\n    } else {\n      return -1;\n    }\n  })\n  let auth_time = rawData.map((val) => {\n    if((buttonState[0] && val.AP_name === apState[0].AP_name) || (buttonState[1] && val.AP_name === apState[1].AP_name))\n      return val.authTime_sec;\n    else {\n      return -1;\n    }\n    })\n  for (var i = ping_date.length-1; i--;) {\n    if (ping_date[i] == 999)\n      ping_date.splice(i, 1);\n  }\n  for (var i = auth_time.length-1; i--;) {\n    if (auth_time[i] == 999)\n      auth_time.splice(i, 1);\n  } \n  let data = lineData(ping_date, auth_time, label)\n  return (\n    <div>\n      <Line data={data}\n        width={400}\n        height={200}\n        options={{\n          maintainAspectRatio: false\n        }}\n      />\n    </div>\n  );\n}\n\nexport { lineAuthGraph };"]},"metadata":{},"sourceType":"module"}