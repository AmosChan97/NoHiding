{"ast":null,"code":"var _jsxFileName = \"/home/little_peter/Desktop/front_end_wifi_monitoring/poketimes/src/components/statistics/barData.js\";\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\n/**\n * Sample pie chart settings from http://jerairrest.github.io/react-chartjs-2/\n * @param {string<object>} rawData of response data from a SQL database\n */\n\nconst barData = (rawData = [], buttonState = [], apState = []) => {\n  let count = 0;\n  let real_dataLabel = [];\n  let dataLabel = rawData.map((val, index) => {\n    if (buttonState[0] && val.AP_name === apState[0].AP_name || buttonState[1] && val.AP_name === apState[1].AP_name) {\n      real_dataLabel.push(++count);\n      return count;\n    }\n  });\n  let real_gateway_ping_ms = [];\n  let pingData = rawData.map((val, index) => {\n    if (buttonState[0] && val.AP_name === apState[0].AP_name || buttonState[1] && val.AP_name === apState[1].AP_name) {\n      real_gateway_ping_ms.push(val.gateway_ping_ms);\n      return val.gateway_ping_ms;\n    }\n  });\n\n  if (real_gateway_ping_ms.length === 0) {\n    real_gateway_ping_ms = [0, 0, 0, 0, 0];\n  }\n\n  if (real_dataLabel.length === 0) {\n    real_dataLabel = [1, 2, 3, 4, 5];\n  }\n\n  console.log(\"Gateway ping\", real_gateway_ping_ms);\n  console.log(\"datalabel ping\", dataLabel);\n  return {\n    labels: real_dataLabel,\n    datasets: [{\n      label: 'Gateway Response Time',\n      backgroundColor: 'rgba(255,99,132,0.2)',\n      borderColor: 'rgba(255,99,132,1)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n      hoverBorderColor: 'rgba(255,99,132,1)',\n      data: real_gateway_ping_ms\n    }]\n  };\n};\n\nexport const barGraphMaker = (allData = [], buttonState = [], apState = []) => {\n  const data = barData(allData, buttonState, apState);\n  const options = {\n    maintainAspectRatio: false,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Time in seconds'\n        }\n      }],\n      xAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Test Number'\n        }\n      }]\n    }\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Gateway Response Statistics\"), React.createElement(Bar, {\n    data: data,\n    height: 400,\n    width: 400,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }));\n};\nexport default barGraphMaker;","map":{"version":3,"sources":["/home/little_peter/Desktop/front_end_wifi_monitoring/poketimes/src/components/statistics/barData.js"],"names":["React","Bar","barData","rawData","buttonState","apState","count","real_dataLabel","dataLabel","map","val","index","AP_name","push","real_gateway_ping_ms","pingData","gateway_ping_ms","length","console","log","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","barGraphMaker","allData","options","maintainAspectRatio","scales","yAxes","scaleLabel","display","labelString","xAxes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\n/**\n * Sample pie chart settings from http://jerairrest.github.io/react-chartjs-2/\n * @param {string<object>} rawData of response data from a SQL database\n */\nconst barData = (rawData = [], buttonState = [], apState = []) => {\n  let count = 0;\n  let real_dataLabel = [];\n  let dataLabel = rawData.map((val, index) => {\n    if((buttonState[0] && val.AP_name === apState[0].AP_name) || (buttonState[1] && val.AP_name === apState[1].AP_name)) {\n      real_dataLabel.push(++count);\n      return count;\n    }\n  })\n  let real_gateway_ping_ms = [];\n  let pingData = rawData.map((val, index) => {\n    if((buttonState[0] && val.AP_name === apState[0].AP_name) || (buttonState[1] && val.AP_name === apState[1].AP_name)) {\n      real_gateway_ping_ms.push(val.gateway_ping_ms);\n      return val.gateway_ping_ms;\n    }\n    \n  })\n  if (real_gateway_ping_ms.length === 0) {\n    real_gateway_ping_ms = [0,0,0,0,0];\n  }\n  if (real_dataLabel.length === 0) {\n    real_dataLabel = [1,2,3,4,5];\n  }\n  console.log(\"Gateway ping\", real_gateway_ping_ms);\n  console.log(\"datalabel ping\", dataLabel);\n  return {\n    labels: real_dataLabel,\n    datasets: [\n      {\n        label: 'Gateway Response Time',\n        backgroundColor: 'rgba(255,99,132,0.2)',\n        borderColor: 'rgba(255,99,132,1)',\n        borderWidth: 1,\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n        hoverBorderColor: 'rgba(255,99,132,1)',\n        data: real_gateway_ping_ms\n      }\n    ]\n  }\n}\n\nexport const barGraphMaker = (allData = [], buttonState=[], apState=[]) => {\n  const data = barData(allData, buttonState, apState);\nconst options = {\n  maintainAspectRatio: false,\n  scales: {\n    yAxes: [{\n      scaleLabel: {\n        display: true,\n        labelString: 'Time in seconds'\n      }\n    }],\n    xAxes: [{\n      scaleLabel: {\n        display: true,\n        labelString: 'Test Number'\n      }\n    }],\n  }     \n}\n\n  return (\n    <div>\n      <h5>Gateway Response Statistics</h5>\n      <Bar\n        data={data}\n        height={400}\n        width={400}\n        options={options}\n      />\n    </div>\n  );\n}\n\nexport default barGraphMaker;"]},"metadata":{},"sourceType":"module"}