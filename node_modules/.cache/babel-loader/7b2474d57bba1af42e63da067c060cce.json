{"ast":null,"code":"var _jsxFileName = \"/home/little_peter/Desktop/front_end_wifi_monitoring/poketimes/src/components/statistics/pieData.js\";\nimport React from 'react';\nimport { Pie } from 'react-chartjs-2';\n/**\n * Sample pie chart settings from http://jerairrest.github.io/react-chartjs-2/\n * @param {string<array>} rawData of response status from remote sensor\n */\n\nconst pieData = (rawData = [], buttonState = [], apState = []) => {\n  let total = 0;\n  let okRes = 0;\n  rawData.map((val, index) => {\n    if (buttonState[0] && val.AP_name === apState[0].AP_name || buttonState[1] && val.AP_name === apState[1].AP_name) {\n      total++;\n      if (val.HTTP_PING_ms === 'HTTP/1.1 200 OK') okRes++;\n    }\n  });\n  let pieData = [okRes, total - okRes];\n  return {\n    labels: ['Response OK', 'Response Bad'],\n    datasets: [{\n      data: pieData,\n      backgroundColor: ['#00AA00', '#FF000'],\n      hoverBackgroundColor: ['#00FF00', '#FF000']\n    }]\n  };\n};\n\nexport const pieComponentMaker = (allData = [], buttonState = [], apState = []) => {\n  // let responseData = allData.map((val) => {\n  //   if((buttonState[0] && val.AP_name === apState[0].AP_name) || (buttonState[1] && val.AP_name === apState[1].AP_name))\n  //     return val.HTTP_PING_ms;\n  // })\n  const data = pieData(allData, buttonState, apState);\n  return React.createElement(\"div\", {\n    className: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Google HTTP response\"), React.createElement(Pie, {\n    data: data,\n    height: 300,\n    widht: 300,\n    options: {\n      maintainAspectRatio: false,\n      responsive: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n};\nexport default pieComponentMaker;","map":{"version":3,"sources":["/home/little_peter/Desktop/front_end_wifi_monitoring/poketimes/src/components/statistics/pieData.js"],"names":["React","Pie","pieData","rawData","buttonState","apState","total","okRes","map","val","index","AP_name","HTTP_PING_ms","labels","datasets","data","backgroundColor","hoverBackgroundColor","pieComponentMaker","allData","maintainAspectRatio","responsive"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA;;;;;AAIA,MAAMC,OAAO,GAAG,CAACC,OAAO,GAAG,EAAX,EAAeC,WAAW,GAAC,EAA3B,EAA+BC,OAAO,GAAG,EAAzC,KAAgD;AAC9D,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAG,CAAZ;AACAJ,EAAAA,OAAO,CAACK,GAAR,CAAY,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC1B,QAAKN,WAAW,CAAC,CAAD,CAAX,IAAkBK,GAAG,CAACE,OAAJ,KAAgBN,OAAO,CAAC,CAAD,CAAP,CAAWM,OAA9C,IAA2DP,WAAW,CAAC,CAAD,CAAX,IAAkBK,GAAG,CAACE,OAAJ,KAAgBN,OAAO,CAAC,CAAD,CAAP,CAAWM,OAA5G,EAAsH;AACpHL,MAAAA,KAAK;AACL,UAAIG,GAAG,CAACG,YAAJ,KAAqB,iBAAzB,EACEL,KAAK;AACR;AACF,GAND;AAOA,MAAIL,OAAO,GAAG,CACZK,KADY,EAEXD,KAAK,GAAGC,KAFG,CAAd;AAIA,SAAO;AACLM,IAAAA,MAAM,EAAE,CACN,aADM,EAEN,cAFM,CADH;AAKLC,IAAAA,QAAQ,EAAE,CAAC;AACTC,MAAAA,IAAI,EAAEb,OADG;AAETc,MAAAA,eAAe,EAAE,CACjB,SADiB,EAEjB,QAFiB,CAFR;AAMTC,MAAAA,oBAAoB,EAAE,CACtB,SADsB,EAEtB,QAFsB;AANb,KAAD;AALL,GAAP;AAiBD,CA/BD;;AAiCA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,OAAO,GAAG,EAAX,EAAef,WAAW,GAAC,EAA3B,EAA+BC,OAAO,GAAG,EAAzC,KAAgD;AAC/E;AACA;AACA;AACA;AACA,QAAMU,IAAI,GAAGb,OAAO,CAACiB,OAAD,EAAUf,WAAV,EAAuBC,OAAvB,CAApB;AACA,SACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAEU,IAAX;AACE,IAAA,MAAM,EAAE,GADV;AAEE,IAAA,KAAK,EAAE,GAFT;AAGE,IAAA,OAAO,EAAE;AACPK,MAAAA,mBAAmB,EAAE,KADd;AAEPC,MAAAA,UAAU,EAAE;AAFL,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAaD,CAnBM;AAqBP,eAAeH,iBAAf","sourcesContent":["import React from 'react';\nimport { Pie } from 'react-chartjs-2';\n\n/**\n * Sample pie chart settings from http://jerairrest.github.io/react-chartjs-2/\n * @param {string<array>} rawData of response status from remote sensor\n */\nconst pieData = (rawData = [], buttonState=[], apState = []) => {\n  let total = 0;\n  let okRes = 0;\n  rawData.map((val, index) => {\n    if ((buttonState[0] && val.AP_name === apState[0].AP_name) || (buttonState[1] && val.AP_name === apState[1].AP_name)) {\n      total++;\n      if (val.HTTP_PING_ms === 'HTTP/1.1 200 OK') \n        okRes++;\n    }\n  })\n  let pieData = [\n    okRes,\n    (total - okRes)\n  ]\n  return {\n    labels: [\n      'Response OK',\n      'Response Bad'\n    ],\n    datasets: [{\n      data: pieData,\n      backgroundColor: [\n      '#00AA00',\n      '#FF000',\n      ],\n      hoverBackgroundColor: [\n      '#00FF00',\n      '#FF000'\n      ]\n    }]\n  }\n}\n\nexport const pieComponentMaker = (allData = [], buttonState=[], apState = []) => {\n  // let responseData = allData.map((val) => {\n  //   if((buttonState[0] && val.AP_name === apState[0].AP_name) || (buttonState[1] && val.AP_name === apState[1].AP_name))\n  //     return val.HTTP_PING_ms;\n  // })\n  const data = pieData(allData, buttonState, apState);\n  return (\n    <div className=\"center\">\n      <h5>Google HTTP response</h5>\n      <Pie data={data} \n        height={300}\n        widht={300}\n        options={{\n          maintainAspectRatio: false,\n          responsive: true\n        }}\n      />\n    </div>\n  );\n}\n\nexport default pieComponentMaker;"]},"metadata":{},"sourceType":"module"}