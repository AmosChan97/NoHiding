{"ast":null,"code":"import _slicedToArray from \"/home/little_peter/Desktop/front_end_wifi_monitoring/poketimes/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/little_peter/Desktop/front_end_wifi_monitoring/poketimes/src/components/statistics/lineData.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\n/**\n * Sample line chart settings from http://jerairrest.github.io/react-chartjs-2/\n * @param {array<string>} labels \n * @param {array<T>} data \n * @param {string} label \n */\n\nconst lineData = (labels = [], data = [], label = \"sample data\") => {\n  for (const _ref of labels.entries()) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    const value = _ref2[0];\n    const i = _ref2[1];\n\n    if (labels[i] == -999) {\n      console.log(\"TEST\", labels[i]);\n      labels.splice(i, 1);\n    }\n  }\n\n  for (const _ref3 of data.entries()) {\n    var _ref4 = _slicedToArray(_ref3, 2);\n\n    const value = _ref4[0];\n    const i = _ref4[1];\n    console.log(\"TEST2\", data[i]);\n\n    if (data[i] == -999) {\n      data.splice(i, 1);\n    }\n  }\n\n  console.log(\"X-AXIS\", labels);\n  console.log(\"Y-AXIS\", data);\n\n  if (labels.length == 0) {\n    labels = [1, 2, 3, 4, 5];\n  }\n\n  if (data.length == 0) {\n    data = [0, 0, 0, 0, 0];\n  }\n\n  return {\n    labels: labels,\n    datasets: [{\n      label: label,\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: data\n    }]\n  };\n};\n\nconst lineAuthGraph = (rawData = [], label = '', buttonState = [], apState = []) => {\n  let count = 0;\n  real_ping_date = [];\n  real_auth_time = [];\n  let ping_date = rawData.map((val, index) => {\n    if (buttonState[0] && val.AP_name === apState[0].AP_name || buttonState[1] && val.AP_name === apState[1].AP_name) {\n      real_ping_date.push(count);\n      return ++count;\n    }\n  });\n  let auth_time = rawData.map(val => {\n    if (buttonState[0] && val.AP_name === apState[0].AP_name || buttonState[1] && val.AP_name === apState[1].AP_name) return val.authTime_sec;else {\n      return -999;\n    }\n  });\n  let data = lineData(ping_date, auth_time, label);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Line, {\n    data: data,\n    width: 400,\n    height: 200,\n    options: {\n      maintainAspectRatio: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }));\n};\n\nexport { lineAuthGraph };","map":{"version":3,"sources":["/home/little_peter/Desktop/front_end_wifi_monitoring/poketimes/src/components/statistics/lineData.js"],"names":["React","Line","lineData","labels","data","label","entries","value","i","console","log","splice","length","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","lineAuthGraph","rawData","buttonState","apState","count","real_ping_date","real_auth_time","ping_date","map","val","index","AP_name","push","auth_time","authTime_sec","maintainAspectRatio"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\n/**\n * Sample line chart settings from http://jerairrest.github.io/react-chartjs-2/\n * @param {array<string>} labels \n * @param {array<T>} data \n * @param {string} label \n */\n const lineData = (labels = [] , data = [], label = \"sample data\") => {\n\n  for (const [value, i] of labels.entries()) {\n    if (labels[i] == -999) {\n      console.log(\"TEST\", labels[i])\n      labels.splice(i, 1);\n    }\n  }\n  for (const [value, i] of data.entries()) {\n    console.log(\"TEST2\", data[i])\n    if (data[i] == -999) {\n      data.splice(i, 1);\n    }\n  }\n  console.log(\"X-AXIS\", labels);\n  console.log(\"Y-AXIS\", data);\n\n  if (labels.length == 0) {\n    labels = [1,2,3,4,5]\n  }\n  if (data.length == 0) {\n    data = [0,0,0,0,0]\n  }\n  return {\n    labels: labels,\n    datasets: [\n      {\n        label: label,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: data\n      }\n    ]\n  }\n};\n\nconst lineAuthGraph = (rawData = [], label = '', buttonState = [], apState=[]) => {\n  let count = 0;\n  real_ping_date=[]\n  real_auth_time=[]\n  let ping_date = rawData.map((val, index) => { \n    if((buttonState[0] && val.AP_name === apState[0].AP_name) || (buttonState[1] && val.AP_name === apState[1].AP_name)) {\n      real_ping_date.push(count)\n      return ++count;\n    }\n  })\n  let auth_time = rawData.map((val) => {\n    if((buttonState[0] && val.AP_name === apState[0].AP_name) || (buttonState[1] && val.AP_name === apState[1].AP_name))\n      return val.authTime_sec;\n    else {\n      return -999;\n    }\n  })\n\n  let data = lineData(ping_date, auth_time, label)\n  return (\n    <div>\n      <Line data={data}\n        width={400}\n        height={200}\n        options={{\n          maintainAspectRatio: false\n        }}\n      />\n    </div>\n  );\n}\n\nexport { lineAuthGraph };"]},"metadata":{},"sourceType":"module"}