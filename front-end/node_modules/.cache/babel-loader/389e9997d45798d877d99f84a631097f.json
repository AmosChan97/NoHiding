{"ast":null,"code":"var _jsxFileName = \"/home/little_peter/Desktop/front_end_wifi_monitoring/poketimes/src/components/statistics/lineData.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\n/**\n * Sample line chart settings from http://jerairrest.github.io/react-chartjs-2/\n * @param {array<string>} labels \n * @param {array<T>} data \n * @param {string} label \n */\n\nconst lineData = (labels = [], data = [], label = \"sample data\") => {\n  if (labels.length == 0) {\n    labels = [1, 2, 3, 4, 5];\n  }\n\n  if (data.length == 0) {\n    data = [0, 0, 0, 0, 0];\n  }\n\n  return {\n    labels: labels,\n    datasets: [{\n      label: label,\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: data\n    }]\n  };\n};\n\nconst lineAuthGraph = (rawData = [], label = '', buttonState = [], apState = []) => {\n  let count = 0;\n  let real_ping_date = [];\n  let real_auth_time = [];\n  let ping_date = rawData.map((val, index) => {\n    if (buttonState[0] && val.AP_name === apState[0].AP_name || buttonState[1] && val.AP_name === apState[1].AP_name) {\n      real_ping_date.push(++count);\n      return count;\n    }\n  });\n  let auth_time = rawData.map(val => {\n    if (buttonState[0] && val.AP_name === apState[0].AP_name || buttonState[1] && val.AP_name === apState[1].AP_name) {\n      real_auth_time.push(val.authTime_sec);\n      return val.authTime_sec;\n    }\n  });\n  let data = lineData(real_ping_date, real_auth_time, label);\n  const options = {\n    maintainAspectRatio: false,\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Time in seconds'\n        }\n      }],\n      xAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Test Rounds'\n        }\n      }]\n    }\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Authentication Time\"), React.createElement(Line, {\n    data: data,\n    width: 400,\n    height: 300,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n};\n\nexport { lineAuthGraph };","map":{"version":3,"sources":["/home/little_peter/Desktop/front_end_wifi_monitoring/poketimes/src/components/statistics/lineData.js"],"names":["React","Line","lineData","labels","data","label","length","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","lineAuthGraph","rawData","buttonState","apState","count","real_ping_date","real_auth_time","ping_date","map","val","index","AP_name","push","auth_time","authTime_sec","options","maintainAspectRatio","scales","yAxes","scaleLabel","display","labelString","xAxes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\n/**\n * Sample line chart settings from http://jerairrest.github.io/react-chartjs-2/\n * @param {array<string>} labels \n * @param {array<T>} data \n * @param {string} label \n */\n const lineData = (labels = [] , data = [], label = \"sample data\") => {\n\n  if (labels.length == 0) {\n    labels = [1,2,3,4,5]\n  }\n  if (data.length == 0) {\n    data = [0,0,0,0,0]\n  }\n  return {\n    labels: labels,\n    datasets: [\n      {\n        label: label,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: data\n      }\n    ]\n  }\n};\n\nconst lineAuthGraph = (rawData = [], label = '', buttonState = [], apState=[]) => {\n  let count = 0;\n  let real_ping_date=[]\n  let real_auth_time=[]\n  let ping_date = rawData.map((val, index) => { \n    if((buttonState[0] && val.AP_name === apState[0].AP_name) || (buttonState[1] && val.AP_name === apState[1].AP_name)) {\n      real_ping_date.push(++count);\n      return count;\n    }\n  })\n  let auth_time = rawData.map((val) => {\n    if((buttonState[0] && val.AP_name === apState[0].AP_name) || (buttonState[1] && val.AP_name === apState[1].AP_name)) {\n      real_auth_time.push(val.authTime_sec);\n      return val.authTime_sec;\n    }\n  })\n  let data = lineData(real_ping_date, real_auth_time, label)\nconst options = {\n  maintainAspectRatio: false,\n  scales: {\n    yAxes: [{\n      scaleLabel: {\n        display: true,\n        labelString: 'Time in seconds'\n      }\n    }],\n    xAxes: [{\n      scaleLabel: {\n        display: true,\n        labelString: 'Test Rounds'\n      }\n    }],\n  }     \n}\n  return (\n    <div>\n    <h5>Authentication Time</h5>\n      <Line data={data}\n        width={400}\n        height={300}\n        options={options}\n      />\n    </div>\n  );\n}\n\nexport { lineAuthGraph };"]},"metadata":{},"sourceType":"module"}